"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6746],{8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>o});var s=n(6540);const t={},a=s.createContext(t);function r(e){const i=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:i},e.children)}},8494:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"common/database","title":"Database","description":"The database package provides common modules for interacting with various databases.","source":"@site/docs/common/database.md","sourceDirName":"common","slug":"/common/database","permalink":"/building-intelligence/docs/common/database","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"database","title":"Database"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction to the Common Package","permalink":"/building-intelligence/docs/common/common-intro"},"next":{"title":"Device","permalink":"/building-intelligence/docs/common/device"}}');var t=n(4848),a=n(8453);const r={id:"database",title:"Database"},o=void 0,l={},d=[{value:"InfluxManager",id:"influxmanager",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Core Functionalities",id:"core-functionalities",level:3},{value:"API Accessors",id:"api-accessors",level:3},{value:"Metadata Retrieval",id:"metadata-retrieval",level:3},{value:"RedisClient",id:"redisclient",level:2},{value:"Initialization",id:"initialization-1",level:3},{value:"Core Functionalities",id:"core-functionalities-1",level:3}];function c(e){const i={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"database"})," package provides common modules for interacting with various databases."]}),"\n",(0,t.jsx)(i.p,{children:"It includes:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"influxdb"}),": A client for managing and querying time-series data in InfluxDB."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"redis"}),": A client for simplified interactions with a Redis database, including JSON serialization."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"influxmanager",children:"InfluxManager"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"InfluxManager"})," class is designed to simplify interactions with InfluxDB. It provides a comprehensive set of methods for reading, writing, and querying time-series data, as well as managing InfluxDB buckets and retrieving metadata such as measurements and fields. This class abstracts away the complexity of the underlying InfluxDB client, offering a more intuitive and streamlined interface for common database operations."]}),"\n",(0,t.jsx)(i.h3,{id:"initialization",children:"Initialization"}),"\n",(0,t.jsxs)(i.p,{children:["To begin using the ",(0,t.jsx)(i.code,{children:"InfluxManager"}),", you first need to initialize it with your InfluxDB connection details. The ",(0,t.jsx)(i.code,{children:"__init__"})," method allows you to configure the manager with the necessary credentials to connect to your InfluxDB instance."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"__init__(self, url, org, token)"})}),": Initializes the ",(0,t.jsx)(i.code,{children:"InfluxManager"})," with the InfluxDB URL, organization, and authentication token. These parameters can be provided directly or through environment variables for easier configuration."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"core-functionalities",children:"Core Functionalities"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"InfluxManager"})," offers a variety of methods to handle different data operations, from simple reads to more complex queries involving data aggregation and downsampling."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:'read(self, start, stop, msname, fields, bucket, tags=None, interval="10m", agg_func="mean")'})}),': Reads data from InfluxDB for a specified time range, measurement, and fields. It also supports optional downsampling, allowing you to aggregate data over a given interval (e.g., "10m", "1h") using a specified function (e.g., "mean", "last"). This is particularly useful for handling large datasets efficiently.']}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"synchronous_write(self, bucket, data, data_frame_measurement_name, tags=None)"})}),": Writes a pandas DataFrame to InfluxDB synchronously. This method is ideal for ensuring that your data is written to the database before proceeding with other operations."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"read_all_fields(self, start, stop, msname, bucket, tags=None)"})}),": Reads all fields from a given measurement within a specified time range. This is useful when you need to retrieve all available data for a particular measurement without specifying each field individually."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"read_accumulated_value(self, start, stop, msname, fields, bucket, timestep, tags=None)"})}),": Reads accumulated values by calculating the difference between consecutive data points. This is particularly useful for meters that report total accumulated values, allowing you to determine consumption over a specific interval."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"read_accumulated_value_in_seconds(self, start, stop, msname, fields, bucket, duration, tags=None)"})}),": Similar to ",(0,t.jsx)(i.code,{children:"read_accumulated_value"}),", but with the duration specified in seconds for more granular control."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"read_average_value_in_seconds(self, bucket, measurement, fields, duration, tags=None)"})}),": Reads the average value of specified fields over a given time range, looking back from the current time. This is useful for getting a quick overview of recent trends."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"read_last_data_point(self, bucket, measurement, fields, tags=None)"})}),": Retrieves the last recorded data point for specified fields. This is ideal for getting the most up-to-date information from your time-series data."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"api-accessors",children:"API Accessors"}),"\n",(0,t.jsxs)(i.p,{children:["For more advanced use cases, the ",(0,t.jsx)(i.code,{children:"InfluxManager"})," provides direct access to the underlying InfluxDB client APIs."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"get_write_api(self, tags=None)"})}),": Retrieves a configured ",(0,t.jsx)(i.code,{children:"WriteApi"})," instance, allowing you to perform custom write operations."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"get_buckets_api(self)"})}),": Retrieves the ",(0,t.jsx)(i.code,{children:"BucketsApi"})," instance for managing InfluxDB buckets."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"get_query_api(self)"})}),": Retrieves the ",(0,t.jsx)(i.code,{children:"QueryApi"})," instance for executing custom Flux queries."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"metadata-retrieval",children:"Metadata Retrieval"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"InfluxManager"})," also includes methods for discovering the structure of your InfluxDB data."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"get_measurements_on_bucket(self, bucket)"})}),": Retrieves all measurement names within a specified bucket."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"get_fields(self, bucket, measurement)"})}),": Retrieves all field names for a given measurement within a bucket."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"redisclient",children:"RedisClient"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"RedisClient"})," class provides a simplified and convenient interface for interacting with a Redis database. It handles common operations such as storing, retrieving, and managing data, with built-in support for JSON serialization and deserialization. This makes it easy to work with complex data structures without having to manually handle the conversion to and from strings."]}),"\n",(0,t.jsx)(i.h3,{id:"initialization-1",children:"Initialization"}),"\n",(0,t.jsxs)(i.p,{children:["To start using the ",(0,t.jsx)(i.code,{children:"RedisClient"}),", you need to initialize it with the connection details for your Redis server."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"__init__(self, host, port, password)"})}),": Initializes the ",(0,t.jsx)(i.code,{children:"RedisClient"})," with the Redis host, port, and password. These can be provided directly or through environment variables for flexible configuration."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"core-functionalities-1",children:"Core Functionalities"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"RedisClient"})," offers straightforward methods for data manipulation, ensuring that your interactions with Redis are both simple and safe."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"save_in_redis(self, key, value)"})}),": Saves a value to the Redis database under a specified key. The value is automatically serialized to JSON, allowing you to store complex data types with ease."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"safe_read_from_redis(self, key)"})}),": Retrieves a value from Redis for a given key. The retrieved value is deserialized from JSON, and the method gracefully handles cases where the key does not exist by returning ",(0,t.jsx)(i.code,{children:"None"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"save_in_redis_with_expiration(self, key, value, expiration_in_seconds)"})}),": Saves a value to Redis with a specified expiration time in seconds. This is useful for caching data or storing temporary information that should be automatically removed after a certain period."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["By providing these high-level abstractions, the ",(0,t.jsx)(i.code,{children:"database"})," package simplifies database interactions and helps you write cleaner, more maintainable code."]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);