"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6911],{2682:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Data Engine/database","title":"Database","description":"The data_engine.database package provides a suite of modules for robust interaction with various database systems, primarily focusing on InfluxDB for time-series data and Redis for caching and configuration management. These modules are essential for the data engine\'s core operations, ensuring efficient data retrieval, storage, and synchronization.","source":"@site/docs/Data Engine/database.md","sourceDirName":"Data Engine","slug":"/Data Engine/database","permalink":"/building-intelligence/docs/Data Engine/database","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"database","title":"Database","sidebar_label":"Database"},"sidebar":"tutorialSidebar","previous":{"title":"Schedule Module","permalink":"/building-intelligence/docs/Core API/schedule"},"next":{"title":"Device","permalink":"/building-intelligence/docs/Data Engine/device"}}');var t=i(4848),s=i(8453);const r={id:"database",title:"Database",sidebar_label:"Database"},o=void 0,l={},d=[{value:"InfluxMirror",id:"influxmirror",level:2},{value:"Key Responsibilities:",id:"key-responsibilities",level:3},{value:"RetrieveDataForCloud",id:"retrievedataforcloud",level:2},{value:"Key Responsibilities:",id:"key-responsibilities-1",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"data_engine.database"})," package provides a suite of modules for robust interaction with various database systems, primarily focusing on InfluxDB for time-series data and Redis for caching and configuration management. These modules are essential for the data engine's core operations, ensuring efficient data retrieval, storage, and synchronization."]}),"\n",(0,t.jsx)(n.h2,{id:"influxmirror",children:"InfluxMirror"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"InfluxMirror"})," class is responsible for synchronizing time-series data from a remote InfluxDB Cloud instance to a local InfluxDB server. This module handles the fetching of measurements, fields, and historical data, providing a reliable mechanism for data replication."]}),"\n",(0,t.jsx)(n.h3,{id:"key-responsibilities",children:"Key Responsibilities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Synchronization"}),": Mirrors data from an InfluxDB Cloud instance to a local InfluxDB server."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Measurement and Field Fetching"}),": Retrieves all measurements and their corresponding fields from the source bucket."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Historical Data"}),": Fetches historical data, with special handling for certain measurements like ",(0,t.jsx)(n.code,{children:"historic"})," to retrieve a longer time range (e.g., 20 days)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scheduled Syncs"}),": Runs synchronization tasks at regular intervals (e.g., hourly) to keep the local database up-to-date."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Implements back-off strategies for handling rate-limiting errors (HTTP 429) from the InfluxDB Cloud API."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resource Management"}),": Ensures that InfluxDB client connections are properly closed upon object destruction."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"retrievedataforcloud",children:"RetrieveDataForCloud"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"RetrieveDataForCloud"})," class is designed to fetch and organize real-time measurement data from InfluxDB. It prepares the data for cloud consumption by structuring it for telemetry, handling potential data gaps, and ensuring the data is in a suitable format for upstream services."]}),"\n",(0,t.jsx)(n.h3,{id:"key-responsibilities-1",children:"Key Responsibilities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Real-time Data Retrieval"}),': Fetches the latest data points for measurements containing "real" in their names.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Aggregation"}),": Retrieves data from all available InfluxDB buckets."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Telemetry Formatting"}),": Organizes the retrieved data into a nested dictionary format suitable for cloud telemetry, including timestamps and geographical coordinates."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dynamic Query Generation"}),": Constructs InfluxDB Flux queries dynamically to fetch data for specified fields and tags."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Cleaning"}),": Handles missing data by replacing NaN values with 0.0."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var a=i(6540);const t={},s=a.createContext(t);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);