"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5692],{2819:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Core API/schedule","title":"Schedule Module","description":"The schedule package provides a robust framework for managing and monitoring device schedules within the building intelligence system. It includes modules for handling both device-specific and weekly recurring schedules, as well as data models and monitoring tools to ensure reliable and efficient scheduling operations.","source":"@site/docs/Core API/schedule.md","sourceDirName":"Core API","slug":"/Core API/schedule","permalink":"/building-intelligence/docs/Core API/schedule","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Device Module","permalink":"/building-intelligence/docs/Core API/device"},"next":{"title":"Database","permalink":"/building-intelligence/docs/Data Engine/database"}}');var d=s(4848),c=s(8453);const l={sidebar_position:4},r="Schedule Module",t={},o=[{value:"Device Scheduler",id:"device-scheduler",level:2},{value:"Class: <code>DeviceScheduler</code>",id:"class-devicescheduler",level:3},{value:"Models",id:"models",level:2},{value:"Key Data Models",id:"key-data-models",level:3},{value:"Enumerations",id:"enumerations",level:3},{value:"Monitor",id:"monitor",level:2},{value:"Class: <code>SchedulerMonitor</code>",id:"class-schedulermonitor",level:3},{value:"Weekly Scheduler",id:"weekly-scheduler",level:2},{value:"Class: <code>WeeklyRecurringScheduler</code>",id:"class-weeklyrecurringscheduler",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"schedule-module",children:"Schedule Module"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"schedule"})," package provides a robust framework for managing and monitoring device schedules within the building intelligence system. It includes modules for handling both device-specific and weekly recurring schedules, as well as data models and monitoring tools to ensure reliable and efficient scheduling operations."]}),"\n",(0,d.jsx)(n.h2,{id:"device-scheduler",children:"Device Scheduler"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"device_scheduler.py"})," module implements the ",(0,d.jsx)(n.code,{children:"DeviceScheduler"})," class, which manages schedules for individual devices. It handles the storage, retrieval, and application of schedule data for device control, interfacing with both InfluxDB and Redis."]}),"\n",(0,d.jsxs)(n.h3,{id:"class-devicescheduler",children:["Class: ",(0,d.jsx)(n.code,{children:"DeviceScheduler"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"get_event_data(time_target)"})}),": Retrieves scheduled event data for a specified time."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"save_schedule(priority, dispatches, redis_client, influx_manager, from_direct_control)"})}),": A class method to save device schedules to InfluxDB."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"models",children:"Models"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"models.py"})," module defines the core data models and enumerations used for scheduling, such as ",(0,d.jsx)(n.code,{children:"ScheduleEvent"}),", ",(0,d.jsx)(n.code,{children:"WeeklyScheduleEvent"}),", and ",(0,d.jsx)(n.code,{children:"PreferenceType"}),". These models provide a structured and consistent way to represent and manipulate time-based events."]}),"\n",(0,d.jsx)(n.h3,{id:"key-data-models",children:"Key Data Models"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"ScheduleEvent"})}),": Represents a single, non-recurring scheduled event with a specific start and end time."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"WeeklyScheduleEvent"})}),": Represents a recurring weekly schedule entry for events that repeat on specific days of the week at a fixed time."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"Schedule"})}),": A container for a collection of scheduled events."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"ScheduleEventData"})}),": A data container for transferring schedule event information."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"AbstractScheduler"})}),": An abstract base class defining the interface for all scheduler implementations."]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"enumerations",children:"Enumerations"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"Weekday"})}),": Enum for the days of the week."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"PreferenceType"})}),": Enum for different types of user preferences that can be scheduled."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"ControlType"})}),": Enum for different types of controls that can be applied to devices."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"monitor",children:"Monitor"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"monitor.py"})," module contains the ",(0,d.jsx)(n.code,{children:"SchedulerMonitor"})," class, which serves as a central registry and controller for all schedulers in the system. It is responsible for loading device configurations, creating scheduler instances, and tracking changes in scheduled events."]}),"\n",(0,d.jsxs)(n.h3,{id:"class-schedulermonitor",children:["Class: ",(0,d.jsx)(n.code,{children:"SchedulerMonitor"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"get_device_scheduler(device_id, type_key)"})}),": Gets the scheduler for a specific device and type."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"get_device_event_data(device_id, type_key, timestamp)"})}),": Retrieves scheduled event data for a specific device at a given timestamp, with fallback to preference types."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"get_device_event_data_with_changed_flag(device_id, type_key, timestamp)"})}),": Gets event data along with a flag indicating if the event has changed from the previous time step."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"weekly-scheduler",children:"Weekly Scheduler"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"weekly_scheduler.py"})," module implements the ",(0,d.jsx)(n.code,{children:"WeeklyRecurringScheduler"})," class for managing weekly recurring events. It supports multiple schedules with specific time slots and handles conflict detection to ensure schedule integrity."]}),"\n",(0,d.jsxs)(n.h3,{id:"class-weeklyrecurringscheduler",children:["Class: ",(0,d.jsx)(n.code,{children:"WeeklyRecurringScheduler"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"get_event(timestamp)"})}),": Gets the active schedule event at the specified timestamp."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"get_event_data(timestamp)"})}),": Gets the complete event data for the specified timestamp, implementing the ",(0,d.jsx)(n.code,{children:"AbstractScheduler"})," interface."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var i=s(6540);const d={},c=i.createContext(d);function l(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);