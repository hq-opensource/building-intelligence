"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9853],{2035:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"common/device","title":"Device","description":"The device package provides common modules for device-related definitions and utilities.","source":"@site/docs/common/device.md","sourceDirName":"common","slug":"/common/device","permalink":"/docs/common/device","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"device","title":"Device"},"sidebar":"tutorialSidebar","previous":{"title":"Database","permalink":"/docs/common/database"},"next":{"title":"Util","permalink":"/docs/common/util"}}');var n=s(4848),c=s(8453);const r={id:"device",title:"Device"},d=void 0,o={},l=[{value:"DeviceHelper",id:"devicehelper",level:2},{value:"Device Types",id:"device-types",level:3},{value:"Utility Methods",id:"utility-methods",level:3}];function a(e){const i={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"device"})," package provides common modules for device-related definitions and utilities."]}),"\n",(0,n.jsx)(i.p,{children:"It includes:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"helper"}),": Defines the ",(0,n.jsx)(i.code,{children:"DeviceHelper"})," Enum for categorizing device types and provides static utility methods for querying and manipulating device data."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"devicehelper",children:"DeviceHelper"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"DeviceHelper"})," Enum is a central component for managing and categorizing various device types within the ecosystem. It provides a standardized set of device types, ensuring consistency across different modules and applications. In addition to defining device categories, the ",(0,n.jsx)(i.code,{children:"DeviceHelper"})," also offers a collection of static utility methods that simplify common tasks related to querying and manipulating lists of device data."]}),"\n",(0,n.jsx)(i.h3,{id:"device-types",children:"Device Types"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"DeviceHelper"})," Enum defines the following device types:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"ON_OFF_EV_CHARGER"})}),": Represents an EV charger that can be turned on or off."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"ELECTRIC_VEHICLE_V1G"})}),": A V1G-capable electric vehicle, allowing for controlled charging."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"ELECTRIC_VEHICLE_V2G"})}),": A V2G-capable electric vehicle, enabling bidirectional energy flow."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"ELECTRIC_STORAGE"})}),": A stationary battery or other electrical energy storage system."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"PHOTOVOLTAIC_GENERATOR_PVLIB"})}),": A photovoltaic generator, modeled using the ",(0,n.jsx)(i.code,{children:"pvlib"})," library."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"SPACE_HEATING"})}),": A device used for heating a space, such as a heat pump or furnace."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"THERMAL_STORAGE"})}),": A system for storing thermal energy, like a hot water tank."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"WATER_HEATER"})}),": A device specifically for heating water."]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"utility-methods",children:"Utility Methods"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"DeviceHelper"})," class includes several static methods that provide convenient ways to work with lists of device data. These methods are designed to be reusable and help streamline common data manipulation tasks."]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"device_exists(devices: List, device_id: str) -> bool"})})}),"\n",(0,n.jsxs)(i.p,{children:["This method checks if a device with a specific ",(0,n.jsx)(i.code,{children:"entity_id"})," exists within a list of device dictionaries. It iterates through the list and returns ",(0,n.jsx)(i.code,{children:"True"})," if a matching device is found, and ",(0,n.jsx)(i.code,{children:"False"})," otherwise. This is useful for quickly verifying the presence of a device before performing further operations."]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"count_devices_by_type(device_list: List, device_type: str) -> int"})})}),"\n",(0,n.jsx)(i.p,{children:"This method counts the number of devices of a particular type within a list of device dictionaries. It is useful for gathering statistics about the composition of a device fleet, such as determining how many space heaters or electric vehicles are present."}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"get_all_values_by_filtering_devices(device_list: list, filter_key: str, filter_value: str, target_key: str) -> List[str]"})})}),"\n",(0,n.jsxs)(i.p,{children:["This method allows you to extract specific values from a list of devices based on a filtering criterion. For example, you can use it to get all the ",(0,n.jsx)(i.code,{children:"entity_id"}),'s of devices with the type "space_heating". It iterates through the device list, filters them based on the provided key-value pair, and returns a list of values from the specified ',(0,n.jsx)(i.code,{children:"target_key"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["By providing both a standardized set of device types and a suite of utility methods, the ",(0,n.jsx)(i.code,{children:"DeviceHelper"})," simplifies device management and helps ensure consistency and reliability across the system."]})]})}function h(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,i,s)=>{s.d(i,{R:()=>r,x:()=>d});var t=s(6540);const n={},c=t.createContext(n);function r(e){const i=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(c.Provider,{value:i},e.children)}}}]);