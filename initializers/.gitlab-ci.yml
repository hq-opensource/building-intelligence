#
# Build Python code
#
build:python:initializers:
  image: python:3.11
  stage: build
  artifacts:
    untracked: true
    reports:
      dotenv: build.env
  before_script:
    - pip install poetry
    - cd initializers
    - poetry config -- http-basic.gitlab-etsim gitlab-ci-token $CI_JOB_TOKEN
  script:
    - poetry install
    - echo "INITIALIZERS_VERSION=$(poetry version -s)" >> ../build.env
  when: always
  tags:
    - $RUNNERTAG

#
# Test Python code
#
test:python:initializers:
  image: python:3.11
  stage: test
  dependencies:
    - build:python:initializers
  before_script:
    - pip install poetry
    - cd initializers
    - poetry config -- http-basic.gitlab-etsim gitlab-ci-token $CI_JOB_TOKEN
  script:
    - poetry run pytest
  when: always
  tags:
    - $RUNNERTAG

#
# Package a Dask Docker image of the optimization micro-service
#
package:docker:initializers:
  image: docker:latest
  stage: package
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY_IMAGE
    - docker buildx create --driver docker-container --use
    - docker buildx build --provenance=false --platform linux/arm64,linux/amd64 -t "$CI_REGISTRY_IMAGE/initializers:$CI_COMMIT_SHA" -t "$CI_REGISTRY_IMAGE/initializers:$INITIALIZERS_VERSION" -t "$CI_REGISTRY_IMAGE/initializers:latest" --build-arg gitlab_user=gitlab-ci-token --build-arg gitlab_token=$CI_JOB_TOKEN --push -f initializers/Dockerfile .
    - docker buildx stop
    - docker buildx rm -f
  when: manual
  tags:
    - $RUNNERTAG